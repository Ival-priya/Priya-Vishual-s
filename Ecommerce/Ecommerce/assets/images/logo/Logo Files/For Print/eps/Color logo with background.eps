%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 2075
%%HiResBoundingBox: 0 0 2391.1199 2074.0798
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 2074.0798 re
W
q
[0.24 0 0 -0.24 0 2074.0798] cm
q
0 0 9962.5 8640.625 re
W*
q
[3.12549 0 0 3.125424 0 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3187.5 2765.625 re
f
Q
q
[29.30147 0 0 29.300844 293.01471 293.00848] cm
/DeviceRGB {} CS
[0.5451 0.1529 0.1922] SC
/DeviceRGB {} cs
[0.5451 0.1529 0.1922] sc
5 65 m
160 0 l
315 65 l
160 10 l
5 65 l
h
5 195 m
160 275 l
315 190 l
160 265 l
5 195 l
h
f*
Q
q
[33.61993 0 0 33.619217 77.095238 2645.5259] cm
/DeviceRGB {} CS
[0.6941 0.3255 0.4] SC
/DeviceRGB {} cs
[0.6941 0.3255 0.4] sc
45.622002 23.059999 m
53.837002 17.903999 65.131004 13.285999 70.634003 15.594999 c
90.951004 24.233999 77.848999 48.149002 71.365005 57.942001 c
76.464005 58.635002 98.320007 66.812004 92.644005 80.106003 c
86.603004 94.536003 55.088005 94.978004 43.371006 83.261002 c
54.703007 89.610001 83.486008 86.82 77.849007 71.332001 c
76.310005 67.311005 69.268005 64.040001 62.399006 62.039001 c
70.634003 48.937 76.23201 33.660004 64.554008 28.235001 c
47.334007 20.231001 18.12801 53.747002 29.172009 73.794998 c
-9.48 48.648998 4.526 -21.768 45.622002 23.059999 c
h
29.172001 73.795998 m
-5.267 38.105999 21.052999 5.533 39.869999 28.909 c
25.825001 43.800999 21.707001 64.137001 29.172001 73.795998 c
h
f*
29.238001 73.906998 m
23.168001 60.310997 43.076 41.373997 50.522003 43.236 c
54.245003 44.207001 60.314003 48.658001 50.522003 66.867004 c
55.620003 67.110001 60.152004 71.075005 59.748001 74.555008 c
59.02 80.139008 49.389 84.428009 43.482002 83.295006 c
55.378002 87.746002 73.587006 79.168007 68.406998 70.509003 c
65.817001 66.220001 60.718998 65.006004 55.134998 64.681999 c
60.313999 57.640999 67.920998 39.028 55.053997 34.577 c
39.272999 29.235001 22.198 60.311001 29.238001 73.906998 c
h
f*
29.238001 73.906998 m
7.388 50.923996 19.931 22.841999 34.741001 35.547997 c
33.608002 36.923996 31.989002 39.674995 31.099001 41.212997 c
16.775 42.345001 21.226 65.004997 29.238001 73.906998 c
h
f*
Q
q
[16.271364 0 0 16.271017 3794.8726 3895.8149] cm
/DeviceRGB {} CS
[0.5451 0.1529 0.1922] SC
/DeviceRGB {} cs
[0.5451 0.1529 0.1922] sc
10.08 29.52 m
10.08 35.440002 l
10.08 37.760002 10.96 38.440002 13.56 38.440002 c
14.759999 38.440002 l
14.759999 40.000004 l
1.159999 40.000004 l
1.159999 38.440002 l
1.759999 38.440002 l
3.959999 38.440002 4.559999 37.960003 4.559999 36.160004 c
4.559999 19.000004 l
4.559999 17.160004 3.959999 16.680004 1.759999 16.680004 c
0.879999 16.680004 l
0.879999 15.120005 l
2.439999 15.040005 4.599999 14.800005 7.359999 14.680005 c
9.999999 14.560005 12.599999 14.480005 13.719999 14.480005 c
21.439999 14.480005 24.719999 18.200005 24.719999 22.320005 c
24.719999 26.960005 20.799999 29.920006 14.639999 29.920006 c
13.199999 29.920006 11.759999 29.800005 10.08 29.520006 c
10.08 29.52 l
h
10.08 16.52 m
10.08 27.880001 l
10.92 28.080002 11.8 28.160002 12.96 28.160002 c
16.68 28.160002 18.76 26.000002 18.76 22.080002 c
18.76 18.400002 16.6 16.240002 12.92 16.240002 c
11.96 16.240002 11.04 16.320002 10.08 16.520002 c
10.08 16.52 l
h
35.880001 29.440001 m
35.880001 35.52 l
35.880001 37.560001 36.760002 38.440002 39.040001 38.440002 c
40.240002 38.440002 l
40.240002 40.000004 l
26.240002 40.000004 l
26.240002 38.440002 l
26.880001 38.440002 l
29.320002 38.440002 30.360001 37.840004 30.360001 35.520004 c
30.360001 19.720005 l
30.360001 17.800005 29.84 16.680004 27.16 16.680004 c
26.32 16.680004 l
26.32 15.120005 l
28.32 15.000005 29.84 14.920005 31.48 14.800005 c
33.720001 14.640005 36.599998 14.520005 38.040001 14.520005 c
43.920002 14.520005 47.120003 15.280006 49.120003 17.280005 c
50.440002 18.600004 51.040001 20.120005 51.040001 21.840004 c
51.040001 24.880005 48.84 27.280005 45.120003 28.280005 c
47.760002 30.480005 49.160004 33.640003 52.000004 36.480003 c
53.640003 38.120003 54.760002 38.600002 57.280003 38.840004 c
57.280003 40.400005 l
56.400002 40.440006 56.000004 40.440006 54.800003 40.440006 c
49.840004 40.440006 47.800003 39.720005 45.920002 37.840008 c
43.920002 35.840008 41.600002 31.640007 39.040001 29.440008 c
35.880001 29.440008 l
35.880001 29.440001 l
h
35.880001 16.24 m
35.880001 27.76 l
37.440002 27.76 l
42.280003 27.76 45.080002 26.280001 45.080002 22 c
45.080002 17.76 41.84 16.24 37.960003 16.24 c
35.880005 16.24 l
35.880001 16.24 l
h
57.599998 16.68 m
57.599998 15.120001 l
70.32 15.120001 l
70.32 16.68 l
69.639999 16.68 l
67.479996 16.68 66.599998 17.6 66.599998 19.68 c
66.599998 35.52 l
66.599998 37.48 67.279999 38.440002 69.720001 38.440002 c
70.32 38.440002 l
70.32 40.000004 l
57.599998 40.000004 l
57.599998 38.440002 l
58.16 38.440002 l
60.279999 38.440002 61.080002 37.440002 61.080002 35.680004 c
61.080002 19.680004 l
61.080002 17.600004 60.360001 16.680004 58.120003 16.680004 c
57.600002 16.680004 l
57.599998 16.68 l
h
89.639999 30 m
89.639999 35.48 l
89.639999 37.400002 90.239998 38.439999 93.120003 38.439999 c
93.720001 38.439999 l
93.720001 40 l
80.080002 40 l
80.080002 38.439999 l
81.080002 38.439999 l
83.480003 38.439999 84.120003 37.359997 84.120003 35.559998 c
84.120003 29.999998 l
75.520004 18.559998 l
74.360001 17.039997 73.880005 16.679998 71.880005 16.679998 c
71.600006 16.679998 l
71.600006 15.119999 l
84.640007 15.119999 l
84.640007 16.679998 l
84.160004 16.679998 l
81.840004 16.679998 81.520004 17.639999 82.360001 18.719997 c
88.760002 27.159996 l
93.400002 19.879995 l
94.440002 18.239996 94.760002 16.679995 91.959999 16.679995 c
91.479996 16.679995 l
91.479996 15.119995 l
100.919998 15.119995 l
100.919998 16.679995 l
98.599998 16.839994 97.919998 17.279995 96.479996 19.479994 c
89.639999 30 l
h
119 30.76 m
110.239998 30.76 l
108.559998 35.439999 l
107.839996 37.48 107.879997 38.439999 111.720001 38.439999 c
112.239998 38.439999 l
112.239998 40 l
101.639999 40 l
101.639999 38.439999 l
102.239998 38.439999 l
104.159996 38.439999 105.159996 37.559998 106.159996 34.759998 c
113 15.679998 l
112.559998 14.519999 l
118.479996 14.519999 l
126.479996 34.839996 l
127.519997 37.479996 128.399994 38.279995 130.479996 38.439995 c
130.479996 39.999996 l
117.479996 39.999996 l
117.479996 38.439995 l
118.879997 38.439995 l
121.32 38.439995 121.68 37.359993 120.879997 35.399994 c
119 30.76 l
h
118.080002 28.559999 m
114.400002 19.200001 l
111.040001 28.560001 l
118.080002 28.560001 l
118.080002 28.559999 l
h
158.279999 40.560001 m
148.839996 20.040001 l
147.519989 17.16 146.959991 16.68 144.679993 16.68 c
144.399994 16.68 l
144.399994 15.120001 l
158.279999 15.120001 l
158.279999 16.68 l
157.600006 16.68 l
154.240005 16.68 153.720001 17.800001 154.840012 20.16 c
161.12001 33.52 l
167.240005 18.959999 l
167.8 17.599998 166.880005 16.679998 164.600006 16.679998 c
163.800003 16.679998 l
163.800003 15.119999 l
173.96001 15.119999 l
173.96001 16.679998 l
173.68001 16.679998 l
171.32001 16.679998 170.44 17.759998 169.12001 20.919998 c
160.800018 40.559998 l
158.280014 40.559998 l
158.279999 40.560001 l
h
175.12 16.68 m
175.12 15.120001 l
187.84 15.120001 l
187.84 16.68 l
187.16 16.68 l
185 16.68 184.12001 17.6 184.12001 19.68 c
184.12001 35.52 l
184.12001 37.48 184.8 38.440002 187.24001 38.440002 c
187.84001 38.440002 l
187.84001 40.000004 l
175.12001 40.000004 l
175.12001 38.440002 l
175.68001 38.440002 l
177.8 38.440002 178.60001 37.440002 178.60001 35.680004 c
178.60001 19.680004 l
178.60001 17.600004 177.88 16.680004 175.64 16.680004 c
175.12 16.680004 l
175.12 16.68 l
h
192.12 39.919998 m
191.12 32.639999 l
192.67999 32.639999 l
194 36.599998 196.35999 38.639999 199.51999 38.639999 c
202.15999 38.639999 204.15999 36.959999 204.15999 34.720001 c
204.15999 28.760002 191.31999 28.960001 191.31999 21.040001 c
191.31999 17.200001 194.67999 14.520001 199.43999 14.520001 c
202.51999 14.520001 204.91998 15.56 205.51999 15.56 c
205.79999 15.56 206.03999 15.480001 206.39999 15.120001 c
207.23999 15.120001 l
207.99998 21.6 l
206.39998 21.6 l
205.51997 18.360001 202.95998 16.24 199.87997 16.24 c
197.63997 16.24 195.95998 17.440001 195.95998 19 c
195.95998 22.68 202.59998 23.360001 207.07997 27.84 c
208.71997 29.48 209.35997 31.200001 209.35997 33.119999 c
209.35997 37.279999 205.59998 40.559998 200.83997 40.559998 c
197.63997 40.559998 194.71997 39.279999 193.99997 39.279999 c
193.63997 39.279999 193.35997 39.48 193.15997 39.919998 c
192.11998 39.919998 l
192.12 39.919998 l
h
231 38.439999 m
231.56 38.439999 l
233.67999 38.439999 234.56 37.52 234.56 35.360001 c
234.56 28.240002 l
221.36 28.240002 l
221.36 35.440002 l
221.36 37.560001 222.2 38.440002 224.44 38.440002 c
225.04001 38.440002 l
225.04001 40.000004 l
212.20001 40.000004 l
212.20001 38.440002 l
212.88 38.440002 l
214.92 38.440002 215.84001 37.520004 215.84001 35.520004 c
215.84001 19.600004 l
215.84001 17.600004 214.96001 16.680004 212.84001 16.680004 c
212.20001 16.680004 l
212.20001 15.120005 l
225.04001 15.120005 l
225.04001 16.680004 l
224.48001 16.680004 l
222.40001 16.680004 221.36002 17.360004 221.36002 19.600004 c
221.36002 25.880005 l
234.56001 25.880005 l
234.56001 19.720005 l
234.56001 17.480005 233.68001 16.680004 231.36002 16.680004 c
231.00002 16.680004 l
231.00002 15.120005 l
243.80002 15.120005 l
243.80002 16.680004 l
243.08002 16.680004 l
241.04002 16.680004 240.08002 17.440004 240.08002 19.600004 c
240.08002 35.440002 l
240.08002 37.520004 240.84001 38.440002 243.16002 38.440002 c
243.80002 38.440002 l
243.80002 40.000004 l
231.00002 40.000004 l
231.00002 38.440002 l
231 38.439999 l
h
264.92001 16.68 m
264.92001 15.120001 l
275.28 15.120001 l
275.28 16.68 l
275 16.68 l
271.79999 16.68 271.32001 18.08 271.32001 20 c
271.32001 29.959999 l
271.32001 38.879997 264.84 40.559998 260.08002 40.559998 c
252.88002 40.559998 248.32002 37.439999 248.32002 31.319998 c
248.32002 19.399998 l
248.32002 17.399998 247.76003 16.679998 245.52002 16.679998 c
244.84003 16.679998 l
244.84003 15.119999 l
257.36002 15.119999 l
257.36002 16.679998 l
256.68002 16.679998 l
255.00003 16.679998 253.84003 17.439999 253.84003 19.399998 c
253.84003 31.319998 l
253.84003 36.199997 257.44003 37.879997 261.08002 37.879997 c
266.32001 37.879997 268.92001 34.919998 268.92001 30.519997 c
268.92001 20.799995 l
268.92001 17.959995 268.12003 16.679997 265.64001 16.679997 c
264.92001 16.679997 l
264.92001 16.68 l
h
293.20001 30.76 m
284.44 30.76 l
282.76001 35.439999 l
282.04001 37.48 282.08002 38.439999 285.92001 38.439999 c
286.44 38.439999 l
286.44 40 l
275.84 40 l
275.84 38.439999 l
276.44 38.439999 l
278.36002 38.439999 279.36002 37.559998 280.36002 34.759998 c
287.20001 15.679998 l
286.76001 14.519999 l
292.68002 14.519999 l
300.68002 34.839996 l
301.72003 37.479996 302.60004 38.279995 304.68002 38.439995 c
304.68002 39.999996 l
291.68002 39.999996 l
291.68002 38.439995 l
293.08002 38.439995 l
295.52002 38.439995 295.88 37.359993 295.08002 35.399994 c
293.20001 30.76 l
h
292.28 28.559999 m
288.60001 19.200001 l
285.24002 28.560001 l
292.28003 28.560001 l
292.28 28.559999 l
h
329.95999 33.040001 m
327.03998 40 l
305.59998 40 l
305.59998 38.439999 l
306.27997 38.439999 l
308.83997 38.439999 309.59998 37.52 309.59998 35.559998 c
309.59998 19.559998 l
309.59998 17.199997 308.23999 16.679997 306.43997 16.679997 c
305.67996 16.679997 l
305.67996 15.119997 l
319.23996 15.119997 l
319.23996 16.679997 l
318.07996 16.679997 l
315.99997 16.679997 315.11996 17.599997 315.11996 19.479996 c
315.11996 35.959995 l
315.11996 37.439995 315.55997 37.799995 317.11996 37.799995 c
322.19995 37.799995 l
324.87994 37.799995 325.67996 36.479996 328.35995 33.039993 c
329.95996 33.039993 l
329.95999 33.040001 l
h
334.39999 27.52 m
332.39999 20.040001 l
332.16 19.120001 332 18.200001 332 17.52 c
332 15.8 333.23999 14.520001 334.88 14.520001 c
336.52002 14.520001 337.76001 15.8 337.76001 17.52 c
337.76001 18.200001 337.60001 19.120001 337.36002 20.040001 c
335.36002 27.52 l
334.40002 27.52 l
334.39999 27.52 l
h
343.79999 39.919998 m
342.79999 32.639999 l
344.35999 32.639999 l
345.67999 36.599998 348.03998 38.639999 351.19998 38.639999 c
353.84 38.639999 355.84 36.959999 355.84 34.720001 c
355.84 28.760002 343 28.960001 343 21.040001 c
343 17.200001 346.35999 14.520001 351.12 14.520001 c
354.19998 14.520001 356.60001 15.56 357.19998 15.56 c
357.47998 15.56 357.71997 15.480001 358.07999 15.120001 c
358.91998 15.120001 l
359.67999 21.6 l
358.07999 21.6 l
357.19998 18.360001 354.63998 16.24 351.56 16.24 c
349.32001 16.24 347.63998 17.440001 347.63998 19 c
347.63998 22.68 354.28 23.360001 358.75998 27.84 c
360.39999 29.48 361.03998 31.200001 361.03998 33.119999 c
361.03998 37.279999 357.27997 40.559998 352.51999 40.559998 c
349.31998 40.559998 346.39999 39.279999 345.67999 39.279999 c
345.32001 39.279999 345.03998 39.48 344.84 39.919998 c
343.79999 39.919998 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
